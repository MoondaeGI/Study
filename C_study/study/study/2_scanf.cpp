#define _CRT_SECURE_NO_WARNINGS //만들어 진 것에 대한 사용
//#pragma warning(disable : 4996) //4996번에 대한 경고 사용을 하지 않겠습니다.
//이 방식의 장점 : 특정 오류에 대한 경고를 막을 수 있음.
//이 방식의 단점 : 특정 오류만 막을 수 있음.(다양한 오류가 뜨면 그 오류에 대한 처리를 일일히 해줘야하는 방식)

#define DATA 5000 // 이름과 값을 적어서 해당 이름을 프로그램 내에서 다음과 같은 값으로
//사용하는 용도로 사용됨.

//_CRT_SECURE_NO_WARNINGS : 안전성에 대한 경고를 진행하지 않겟습니다.

//전처리기(preprocessor) : 프로그램을 컴파일하기 전에 실행되는 별도의 프로그램
//자주 사용되는 전처리기
// 1. #include <<- 헤더 파일을 추가하는 기능
// 2. #define <<- 매크로를 만드는 기능 (특정 값에 대한 설정 , 특정 작업에 대한 처리)
// 3. #pragma <<- 처리 기능(컴파일러에게 직접적으로 명령을 내리는 지시자)

//컴파일(compile) : 프로그래밍 언어로 작성한 코드를 컴퓨터식 기계어로 번역하는 행위
#include <stdio.h>


//입력 기능 scanf();
//사용 방법
//scanf(서식지정자,&변수);

int main()
{
	int number; // 변수 선언
	scanf("%d", &number); // number에 대한 입력을 진행합니다.
	//오류 해결 방법 1. scanf_s()를 대신 사용한다.
	// 이 방법은 Visual Studio에서만 사용이 가능함. 가장 편하지만 잘 안쓰려 함.
	//오류 해결 방법 2. define을 통해 안전 검사 경고를 막는다.
	//오류 해결 방법 3 . pragma를 통해 해당 경고를 사용하지 않게 처리합니다.

	/*&(ampersand) : 주소 연산자 변수 앞에 붙는 이 기호는 해당 변수의 주소값으로 반환해주는 역할을 합니다.
	주소값 : 컴퓨터에서 데이터가 저장되어있는 위치
	scanf에서 &를 사용하는 이유 : 입력은 프로그램 안에다가 진행하기 때문에 프로그램에서 변수가 저장된
	실제 위치에 전달되어야 함으로 주소값을 이용한다.
	scanf가 안전하지 않은 이유 : 프로그램 안에 직접적으로 값을 전달하는 과정이 입력이기 때문에*/

	printf("number = %d\n", number); //number에 대한 출력을 진행합니다.

	//[실습]
	//현재 해당 코드에는 매크로 변수 DATA가 존재합니다.
	//숫자를 입력받아서 DATA에서 입력한 숫자를 뺀 값을 출력하는 프로그램 코드를 작성하시오.
	printf("DATA = %d\n", DATA);
	printf("숫자를 입력해주세요 >>> ");
	scanf("%d", &number);
	printf("Data - number = %d", DATA - number);

	return 0;
}