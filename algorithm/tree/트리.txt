5. 트리
-> 자료 구조에서 계층적 관계가 있을 경우 사용
-> 배열, 링크드 리스트 등은 데이터간의 선형적 관계를 가짐
-> 링크드 리스트에 상/하위의 레퍼런스를 추가해서 만듦

-> root 노드: 모든 노드들의 시작점(head 노드)
-> 부모/ 자식 노드: 해당 노드들의 직속 상/하위적 관계를 가진 노드
-> 형제 노드: 같은 부모노드를 가진 자식 노드들
-> 깊이: root에서부터 얼마나 내려와야 하는지를 가리키는 값
-> 레벨: 깊이+1
-> 높이: 가장 밑의 노드에서부터 root까지의 깊이
-> 부분 트리: 트리 하나 안의 작은 트리들을 가리킴

-> 다양한 문제를 기발하게 해결(정렬, 압축)
-> 다양한 추상 자료형 구현 가능

1) 이진 트리
-> 각 노드가 최대 2개의 자식 노드를 가지는 트리(왼쪽/오른쪽 자식 노드 구별)
-> 구현도 쉬움

1: 정이진 트리(full binary tree)
-> 모든 노드들이 자식을 0 또는 2개씩 가지고 있는 이진 트리
2: 완전 이진 트리(complete binary tree)
-> 마지막 레벨 직전 노드들은 모두 2개씩의 자식 노드를 가지고 있어야 함
-> 마지막 레벨 노드는 왼쪽부터 2개씩 채워져 있어야 함.(모두 채울 필요는 없음)
-> 완전 이진 트리의 높이: logN에 비례
3: 포화 이진 트리(perfect binary tree)
-> 마지막 레벨까지 꽉 차있어야 하는 이진 트리

2) 순회: 자료 구조에 저장된 데이터를 모두 출력하는 것
-> 트리를 순회하는 방법: 재귀 함수 사용
-> 재귀적으로 왼쪽 부분 트리 순회 -> 재귀적으로 오른쪽 부분 트리 순회
1: pre-order 순회
-> 트리를 순회하기 전 노드를 출력함
2: post-order 순회
-> 노드 출력 전 트리를 순회함
3: in-order 순회
-> 왼쪽 부분 트리 순회 -> 출력 -> 오른쪽 부분 트리 순회 -> 출력

-> 순회를 할때 데이터 간의 선형적 순서를 만들어 줄 수 있어야 한다
-> 순회 방식에 따라 출력된 데이터들로 선형적 관계로 만들 수 있음
