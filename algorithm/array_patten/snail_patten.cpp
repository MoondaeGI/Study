// 다음과 같은 출력 결과가 나오도록 배열을 만들고 출력하시오
/*
	
	01 02 03 04 05	 
	16 17 18 19 06   
	15 24 25 20 07   
	14 23 22 21	08   
	13 12 11 10 09   


	-------------------------------------------------------------------------
	1. 해당 패턴은 다음과 같은 작은 부분들로 나눌 수 있습니다.

	1)                  2)            3)
	  
	01 02 03 04 05
	16          06      17 18 19
	15          07  >>  24    20  >>  25
	14          08      23 22 21  
	13 12 11 10 09 

	1. 홀수의 경우 >>  1 x 1에서 끝납니다.
	2. 짝수의 경우 >>  2 x 2에서 끝납니다. 


	-------------------------------------------------------------------------
	2. 이 패턴을 배열에 값을 입력해 주기 위해서 시작 부분과 끝 부분을 정해줍니다.

	ex) 5 x 5 배열
	패턴 1) 시작: 0,  끝: 4
	패턴 2) 시작: 1,  끝: 3
	패턴 3) 시작: 2,  끝: 2
	>> 종료

	ex) 6 x 6 배열
	패턴 1) 시작: 0,  끝: 5
	패턴 2) 시작: 1,  끝: 4
	패턴 3) 시작: 2,  끝: 3
	>> 종료

	해당 내용으로 다음과 같은 사실을 유추 가능합니다
	>> 패턴은 시작값, 끝값이 같거나 시작값이 끝값보다 클 때까지 움직인다


	-------------------------------------------------------------------------
	3. 코드 구성

	1) 입력받은 배열, 시작, 끝 값을 선언합니다.
	2) 패턴이 종료되는 시점 (시작 끝값이 같아지거나 시작값이 끝값보다 커지는 시점)까지 while 반복
	3) 테두리 부분을 그리는 부분 패턴 작성 (위 > 오른쪽 > 아래 > 왼쪽 순) 
	4) 루프 종료시, 시작/끝값을 증가/감소 시킵니다.
		- 홀수 배열의 종료시, 4번의 for문이 돌아가는것을 막기 위해서 if문으로 값을 하나 입력시키고 루프를 종료시킵니다.  
	5) 배열 printf
	
*/
#include "Header.h"


int main()
{
	int array[5][5];  // 원하는 크기의 정사각형 배열 선언
	int number = 1;   // 값을 입력받기위한 정수 선언

	int start_point = 0;  // 시작값 초기화
	int last_point = 4;   // 끝값 초기화

	while (start_point <= last_point) {  // 패턴의 종료 조건 설정
		if (start_point == last_point) {  // 홀수 패턴의 마지막 구간이라면,
			array[start_point][start_point] = number++;  // 마지막 하나값만 넣어주고
			break;  // 루프 종료
		}

		for (int i = start_point; i <= last_point; i++) {  // 패턴의 위쪽
			array[start_point][i] = number++;
		}

		for (int j = start_point + 1; j <= last_point; j++) {  // 패턴의 오른쪽
			// 위쪽에서 그렸던 구간과 중복되지 않기 위해서 시작 점을 1 증가
			array[j][last_point] = number++;
		}

		for (int i = last_point - 1; i >= start_point; i--) {  // 패턴의 아래쪽
			// 오른쪽에서 그렸던 구간과 중복되지 않기 위해서 시작 점을 1 감소
			array[last_point][i] = number++;
		}

		for (int j = last_point - 1; j >= start_point + 1; j--) {  // 패턴의 왼쪽
			// 아래쪽, 위쪽에서 그렸던 구간과 중복되지 않기 위해서 시작, 끝 점을 1 감소/증가
			array[j][start_point] = number++;
		}

		start_point++;  // 시작값 증가
		last_point--;   // 끝값 감소
	}

    // 배열 출력
	for (int i = 0; i < 5; i++) {  
		for (int j = 0; j < 5; j++) {
			printf("%02d ", array[i][j]);
		}
		printf("\n");
	}

	return 0;
}